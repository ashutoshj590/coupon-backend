#!/usr/bin/env node
const handler = require('node-deployment');
const initialiseServer = () => {
    let t = Math.floor(new Date());
    var app = require('../server.js');
    var util = require('../lib/Utils.js');
    var debug = require('debug')('axon:server');
    var http = require('http');
    let { parsedConfig } = util;

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '80');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */
    console.log('Starting server');
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    server.on('close', () => {
        console.log('Server is getting closed at ', new Date());
    })

    /*
    setInterval(() => {
      server.getConnections(function (error, count) {
        console.log('Connection Count is', count);
      });
  
    }, 1000);*/

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }

    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        console.log('Server started listening at', Math.floor(new Date()));
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
    return server;
}
handler(initialiseServer);